import java.util.ArrayList;





/**
 * This class represents a term in a user query and its characteristics 
 * 
 * @author Clint P. George
 *
 */


public class Term {
	public int order = 0; // Assume that order may make difference in future
	public String term = "";
	public boolean processed = false;
	public boolean valid = true; 
	public Constants.TermType Type = Constants.TermType.ONE_GRAM; // default is one - gram
	private ArrayList<Category> categories = new ArrayList<Category>();

	
	/**
	 * This constructor is usually called for an SSQ generated by QRR 
	 * 
	 * @param order order of the term in a user query 
	 * @param a term term in the string format 
	 * @param category an annotated category 
	 */
	public Term(int order, String term, String category) {
		this.order = order;
		this.assignTerm(term);
		this.categories.add(new Category(category, 1.0));
	}

	/**
	 * This constructor is usually called for an SSQ generated by QRR 
	 * 
	 * @param a term term in the string format 
	 * @param category an annotated category 
	 */
	public Term(String term, String category) {
		this.assignTerm(term);
		this.categories.add(new Category(category, 1.0));
	}
	
	/**
	 * This constructor is usually called for an SSQ generated by NLP engine  
	 * 
	 * @param order order of the term in a user query (not sure how to handle this!!)
	 * @param term a term in the string format 
	 */
	public Term(int order, String term) {
		this.order = order;
		this.assignTerm(term);
		this.assignCategories(term);
	}
	
	/**
	 * This constructor is usually called for an SSQ generated by NLP engine  
	 * 
	 * @param term a term in the string format 
	 */
	public Term(String term) {
		this.assignTerm(term);
		this.assignCategories(term);
	}

	private void assignCategories(String term) {

		//TermProbabilitiesStore.loadClasses();
		
		// Gets the term probabilities from the Store 
		this.categories = TermProbabilitiesStore.getTermProbabilitiesFromNLPDB(term, this.Type, true);
		
	}
	

	/**
	 * Assigns the term to the Term object and classify its gram 
	 * 
	 * @param term a term in the string format 
	 */
	
	private void assignTerm(String term){
		
		String[] strAry = term.toString().split(" ");
		
		switch(strAry.length){
		case 1: 
			this.Type = Constants.TermType.ONE_GRAM;
			break;
		case 2: 
			this.Type = Constants.TermType.TWO_GRAM;
			break;
		case 3: 
			this.Type = Constants.TermType.THREE_GRAM;
			break;
		default: 
			this.Type = Constants.TermType.N_GRAM;
			break;
		}
		
		this.term = term.trim(); 		
	}
	
	public void addCategory(String category, double probability){
		this.categories.add(new Category(category, probability));
	}
	
	public ArrayList<Category> getCategories() {
		return this.categories;
	}
	
	public Category getMostProbableCategory() {
		
		Category c = null; 
		
		
		
		c = this.categories.get(0);
		
		return c;
	}
}
